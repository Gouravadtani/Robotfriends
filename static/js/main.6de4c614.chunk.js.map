{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","headers","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","message","ReactDOM","render","document","getElementById","registerServiceWorker"],"mappings":"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","file":"static/js/main.6de4c614.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 na2 grow bw2 shadow'>\r\n    <img alt='robots' src={`https://robohash.org/${id}?200*200`} />\r\n    <div>\r\n       <h2>{name}</h2>\r\n       <p>{email}</p>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\nconst cardComponent = robots.map((user, i) => {\r\n  return <Card\r\n   key={i}\r\n   id={robots[i].id}\r\n   name={robots[i].name}\r\n   email={robots[i].email} />\r\n})\r\n  return (\r\n    <div>\r\n      {cardComponent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, SearchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n    <input\r\n       className='pa3 ba b--green bg-lightest-blue'\r\n       type='search'\r\n       placeholder='search robots'\r\n       onChange={SearchChange}\r\n     />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n       {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\ncomponentDidCatch(error, info) {\r\n  this.setState({ hasError: true})\r\n}\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n\r\n     .then(users => {this.setState({ robots: users})});\r\n}\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    if (this.state.robots.length === 0) {\r\n      return <h1> Loading </h1>\r\n    } else {\r\n  return (\r\n    <div className='tc'>\r\n    <h1 className='f1'>RoboFriends</h1>\r\n    <SearchBox SearchChange={this.onSearchChange}/>\r\n    <Scroll>\r\n    <ErrorBoundry>\r\n        <CardList robots={filteredRobots} />\r\n    </ErrorBoundry>\r\n    </Scroll>\r\n    </div>\r\n\r\n      );\r\n    }\r\n   }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}